# Pandas na prática: usando Python para análise de dados

Neste repositório estão os arquivos usados no minicurso de Pandas dado pelos alunos **Davi Reis Furtado** e **Gabriel de Almeida Dias** na XIII Feira do Conhecimento do IFF Campus Bom Jesus

Segue um pequeno roteiro da aula:
1. Importar a biblioteca *pandas* com apelido *pd* - `import pandas as pd`
2. Criação de dataframes
    1. A partir de dicionários - `df = pd.DataFrame(dict)`
    2. Vazio - `df = pd.DataFrame()`
    3. Vazio com colunas pré-definidas - `df = pd.DataFrame(columns=['column1', 'column2'])`
3. Selecionando colunas
    1. Uma única - `df['column']`
    2. Mais de uma - `df[['column_a', ... , 'column_z']]`
    3. Valores únicos de uma coluna com `.unique()`
    4. Quantidades de valores únicos de uma coluna com `.nunique()`
    5. Valores e suas frequências com `.value_counts()`
4. `df.loc[...]`
    1. `df.loc[n]` - Seleciona uma linha
    2. `df.loc[n, ‘column’]` - Seleciona o elemento na linha n e na coluna column
    3. `df.loc[n, [’column_a’, … , ’column_z’]]` - Seleciona a linha n com as colunas especificadas
    4. `df.loc[condition]` - Seleciona a linha se a condição for satisfeita
    5. `df.loc[condition, ‘column’]` - Seleciona o elemento na linha na coluna column se a condição for satisfeita
    6. `df.loc[condition, [’column_a’, … , ’column_z’]]` - Seleciona a linha com as colunas especificadas se a condição for satisfeita
5. `print(df)` - Mostra a tabela no terminal, mas sem formatação
6. `display(df)` - Mostra a tabela com formatação no terminal, mas só em arquivos `.ipynb`
7. Importando arquivo Excel (`.xlsx`) pra dentro do python - `pd.read_xlsx('file.xlsx')`
8. `df.head(n=5)` - Pega as primeiras *n* linhas de uma tabela (se não colocar nada, *n* vale 5)
9. `df.shape` - Pega o número de colunas e o número de linhas do dataframe
10. `df.describe()` - Faz um ‘resuminho’ das colunas com valores numéricos
11. Juntar DataFrames com mesmas colunas com `new_df = pd.concat([df1, df2], ignore_index=True)`
12. Inserir um DataFrame no Excel com `df.to_excel(‘nome’, index=False)`
13. Apagar
    1. Linhas - `new_df = df.drop(0, *axis*=0)`
    2. Colunas - `vendas_df.drop(0, *axis*=0)`
14. Deletando/completando valores vazios
    1. `df = df.dropna(how='all', axis=1)` - Deleta todas as colunas (pois axis=1) completamente vazias
    2. `df = df.dropna()` - Deleta todas as linhas (pois axis=0) com pelo menos 1 valor vazio
    3. `df['column'] = df['column'].fillna(0)` - Todos os valores vazios viram 0
    4. `df['column'] = df['column'].fillna(df['column'].mean())` - Todos os valores vazios viram a média da coluna
    5. `df = df.ffill()` - Preenche os valores vazios com o primeiro valor válido encontrado acima
15. Gerando mini relatório com `relatorio = df[['column1', 'column2']].groupby('column1').sum()`  também podemos usar com `.mean()`
16. Unindo DataFrames ‘parecidos’ com `df1 = df1.merge(df2)`